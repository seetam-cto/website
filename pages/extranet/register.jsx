'use client';
import Head from 'next/head'
import Image from 'next/image'
import Header from "../../components/Header"
import Footer from '../../components/Footer'
import { getSettings, loginVendor, registerVendor } from '../../controllers/general'
import { useDispatch, useSelector } from 'react-redux'
import { useEffect, useState } from 'react'
import { useRouter } from 'next/router'
import {AnimatePresence} from "framer-motion"
import { Row, Col, Card, Form, Divider, Button, Input, message } from 'antd'
import datePicker from "../../assets/images/date-picker.png"
import {motion} from "framer-motion"

export default function IntranetRegister({settingsData}) {
  let sets = useSelector((state) => state.settings)
  const dispatch = useDispatch()
  const [userData, setUserData] = useState({
    name: '',
    email: '',
    password: '',
    phone_number: '',

  })
  const [loginData, setLoginData] = useState({
    email: '',
    password: ''
  })
  const [formState, setFormState] = useState('register')
  const router = useRouter()
  useEffect(() => {
    if(!sets.loaded){
      dispatch({
        type: "FETCH_API",
        payload: {
          ...settingsData,
          loaded: true
        }
      })
      router.push("/extranet/register")
    }
  },[sets, dispatch, router, settingsData])
  const [form] = Form.useForm();
  const onFinish = async (values) => {
    try{
      let newData = {
        ...userData,
        phone_number: `+91${userData.phone_number}`
      }
      let res = await registerVendor(newData)
      console.log(res)
      setFormState("success")
      message.success("Registration Successful!")
      setUserData({
        name: '',
        email: '',
        password: '',
        phone_number: '',
    
      })
    }catch(err){
      message.error("Sorry, there seems to be a problem with Registration!")
      console.log(err)
    }
  };
  const onFinishFailed = (errorInfo) => {
    message.error("Please fillup all the fields!")
    console.log(errorInfo)
  };

  const [formLogin] = Form.useForm();
  const loginOnFinish = async (values) => {
    try{
      let newData = {...loginData}
      let res = await loginVendor(newData)
      console.log(res)
      setFormState("success")
      message.success("Login Successful!")
      setLoginData({
        email: "",
        password: ""
      })
    }catch(err){
      message.error("Sorry, there seems to be a problem with Registration!")
      console.log(err)
    }
  }
  const loginOnFinishFailed = (errorInfo) => {
    message.error("Please fillup all the fields!")
    console.log(errorInfo)
  }
  return (
    <div className="home">
      <Head>
        <title>SwitchOff - About</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AnimatePresence>
        <Header theme={"dark"} headerSettings={settingsData}/>
        <div className="intranet extranet">
          <div className="intranet-header short">
            <div className="container">
              <div className="intranet-top">
                  <Row justify={'center'} align={'middle'}>
                    <Col md={8}>
                      <Image src={datePicker.src} width={500} height={600} quality={100} alt="partner register" className='intranet-register-image' />
                    </Col>
                    <Col xs={24} md={8}>
                        {formState === 'register' && (
                          <motion.div
                          initial={{x: 400, opacity: 0}}
                          animate={{x: 0, opacity: 1}}
                          transition={{duration: 0.5}}
                          exit={{x: -400, opacity: 0}}
                          key="register-extranet-form">
                            <h2 className='intranet-top-title'>Create your partner account</h2>
                            <Form
                            onFinish={onFinish}
                            onFinishFailed={onFinishFailed}
                            form={form} className='intranet-register' layout='vertical'>
                                <p>Create an account to list and manage your property.</p>
                                <Divider />
                                <Form.Item
                                label={"Full name"}
                                name={"name"}
                                rules={[{ required: true, message: 'Please enter your name' }]}
                                >
                                    <Input size='large' placeholder='Enter full name' value={userData.name} onChange={(e) => setUserData({...userData, name: e.target.value})} />
                                </Form.Item>
                                <Form.Item
                                label={"Email address"}
                                name={"email"}
                                rules={[{ required: true, message: 'Please enter your email!'}, {type: "email", message: 'The input is not valid E-mail!'}]}
                                >
                                    <Input size='large' placeholder='Enter your email' value={userData.email} onChange={(e) => setUserData({...userData, email: e.target.value})} />
                                </Form.Item>
                                <Form.Item
                                label={"Password"}
                                name={"password"}
                                rules={[{ required: true, message: 'Please enter your password!' }]}
                                >
                                    <Input.Password size='large' placeholder='Enter password' value={userData.password} onChange={(e) => setUserData({...userData, password: e.target.value})} />
                                </Form.Item>
                                <Form.Item
                                label={"Phone Number"}
                                name={"phone_number"}
                                rules={[{ required: true, message: 'Please enter your phone Number!' }]}
                                >
                                    <Input size='large' placeholder='Enter Phone Number' prefix={"+91"} maxLength={10} inputMode='number' value={userData.phone_number} onChange={(e) => setUserData({...userData, phone_number: e.target.value})} />
                                </Form.Item>
                                <Button htmlType='submit' type='primary' size='large' block>Register</Button>
                                <Divider><p>Already a partner?</p></Divider>
                                <Button size='large' block onClick={() => setFormState('login')}>Login Now</Button>
                            </Form>
                          </motion.div>
                        )}
                        {formState === "login" && (
                          <motion.div
                          initial={{x: 400, opacity: 0}}
                          animate={{x: 0, opacity: 1}}
                          transition={{duration: 0.5}}
                          exit={{x: -400, opacity: 0}}
                          key="login-extranet-form">
                            <h2 className='intranet-top-title'>Login to your partner account</h2>
                            <Form
                            onFinish={loginOnFinish}
                            onFinishFailed={loginOnFinishFailed}
                            form={formLogin} className='intranet-register' layout='vertical'>
                                <Form.Item
                                label={"Email address"}
                                name={"loginemail"}
                                rules={[{ required: true, message: 'Please enter your email!'}, {type: "email", message: 'The input is not valid E-mail!'}]}
                                >
                                    <Input size='large' placeholder='Enter your email' value={loginData.email} onChange={(e) => setLoginData({...loginData, email: e.target.value})} />
                                </Form.Item>
                                <Form.Item
                                label={"Password"}
                                name={"loginpassword"}
                                rules={[{ required: true, message: 'Please enter your password!' }]}
                                >
                                    <Input.Password size='large' placeholder='Enter password' value={loginData.password} onChange={(e) => setLoginData({...loginData, password: e.target.value})} />
                                </Form.Item>
                                <Button htmlType='submit' type='primary' size='large' block>Login</Button>
                                <Divider><p>Partner with us.</p></Divider>
                                <Button size='large' block onClick={() => setFormState('register')}>Register Now</Button>
                            </Form>
                          </motion.div>
                        )}
                        {formState === "success" && (
                          <motion.div
                          initial={{x: 400, opacity: 0}}
                          animate={{x: 0, opacity: 1}}
                          transition={{duration: 0.5}}
                          exit={{x: -400, opacity: 0}}
                          key="success-extranet-form">
                            <h2 className='intranet-top-title'>Registration Successfull!</h2>
                            <div
                            className='intranet-register center'>
                                <i className="fa-solid fa-circle-check"></i>
                                <p>{userData.name}, we willl contact you soon for Verification!</p>
                                <Divider><p>Already a partner?</p></Divider>
                                <Button size='large' block onClick={() => setFormState('login')}>Login Now</Button>
                            </div>
                          </motion.div>
                        )}
                    </Col>
                </Row>
              </div>
            </div>
          </div>
        </div>
        <Footer footer={settingsData.footer} general={settingsData.general}/>
      </AnimatePresence>
    </div>
  )
}

export async function getStaticProps() {
  let res = await getSettings()
  // let properties = await getProperties()
  return {
    props: {
      settingsData: res.settings
    }
  }
}
